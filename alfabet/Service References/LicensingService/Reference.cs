//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace alfabet.LicensingService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/LicensingService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubscribeViewModel", Namespace="http://schemas.datacontract.org/2004/07/LicensingService")]
    [System.SerializableAttribute()]
    public partial class SubscribeViewModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DatabasesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FeaturesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Databases {
            get {
                return this.DatabasesField;
            }
            set {
                if ((this.DatabasesField.Equals(value) != true)) {
                    this.DatabasesField = value;
                    this.RaisePropertyChanged("Databases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Features {
            get {
                return this.FeaturesField;
            }
            set {
                if ((this.FeaturesField.Equals(value) != true)) {
                    this.FeaturesField = value;
                    this.RaisePropertyChanged("Features");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Serial {
            get {
                return this.SerialField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialField, value) != true)) {
                    this.SerialField = value;
                    this.RaisePropertyChanged("Serial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Users {
            get {
                return this.UsersField;
            }
            set {
                if ((this.UsersField.Equals(value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LicensingService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        alfabet.LicensingService.CompositeType GetDataUsingDataContract(alfabet.LicensingService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<alfabet.LicensingService.CompositeType> GetDataUsingDataContractAsync(alfabet.LicensingService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNewSerial", ReplyAction="http://tempuri.org/IService1/GetNewSerialResponse")]
        string GetNewSerial();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNewSerial", ReplyAction="http://tempuri.org/IService1/GetNewSerialResponse")]
        System.Threading.Tasks.Task<string> GetNewSerialAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenerateSerials", ReplyAction="http://tempuri.org/IService1/GenerateSerialsResponse")]
        bool GenerateSerials(int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenerateSerials", ReplyAction="http://tempuri.org/IService1/GenerateSerialsResponse")]
        System.Threading.Tasks.Task<bool> GenerateSerialsAsync(int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isValidSerial", ReplyAction="http://tempuri.org/IService1/isValidSerialResponse")]
        bool isValidSerial(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isValidSerial", ReplyAction="http://tempuri.org/IService1/isValidSerialResponse")]
        System.Threading.Tasks.Task<bool> isValidSerialAsync(string serial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSubscription", ReplyAction="http://tempuri.org/IService1/AddSubscriptionResponse")]
        bool AddSubscription(alfabet.LicensingService.SubscribeViewModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSubscription", ReplyAction="http://tempuri.org/IService1/AddSubscriptionResponse")]
        System.Threading.Tasks.Task<bool> AddSubscriptionAsync(alfabet.LicensingService.SubscribeViewModel model);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : alfabet.LicensingService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<alfabet.LicensingService.IService1>, alfabet.LicensingService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public alfabet.LicensingService.CompositeType GetDataUsingDataContract(alfabet.LicensingService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<alfabet.LicensingService.CompositeType> GetDataUsingDataContractAsync(alfabet.LicensingService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string GetNewSerial() {
            return base.Channel.GetNewSerial();
        }
        
        public System.Threading.Tasks.Task<string> GetNewSerialAsync() {
            return base.Channel.GetNewSerialAsync();
        }
        
        public bool GenerateSerials(int number) {
            return base.Channel.GenerateSerials(number);
        }
        
        public System.Threading.Tasks.Task<bool> GenerateSerialsAsync(int number) {
            return base.Channel.GenerateSerialsAsync(number);
        }
        
        public bool isValidSerial(string serial) {
            return base.Channel.isValidSerial(serial);
        }
        
        public System.Threading.Tasks.Task<bool> isValidSerialAsync(string serial) {
            return base.Channel.isValidSerialAsync(serial);
        }
        
        public bool AddSubscription(alfabet.LicensingService.SubscribeViewModel model) {
            return base.Channel.AddSubscription(model);
        }
        
        public System.Threading.Tasks.Task<bool> AddSubscriptionAsync(alfabet.LicensingService.SubscribeViewModel model) {
            return base.Channel.AddSubscriptionAsync(model);
        }
    }
}
